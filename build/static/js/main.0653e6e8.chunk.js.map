{"version":3,"sources":["AppFunctions.js","Editor.js","Viewer.js","Cli.js","Menubar.js","Config.js","App.js","serviceWorker.js","index.js"],"names":["electron","dialog","fs","childProcess","path","electronStore","isDev","window","require","remote","e","store","module","exports","handleOpenBtn","this_","showOpenDialog","properties","filters","name","extensions","then","result","canceled","filepath","filePaths","readFile","err","data","console","log","setState","file","handleContentChange","catch","handleCloseBtn","filecontent","viewimage","clioutput","onSaveShortCut","state","handleSaveBtn","writeFile","newcontent","editorIsLive","watches","map","watcherfile","unwatchFile","rawoutput","resolve","lines","split","newwatches","i","length","newwatch","newwatchMatched","search","trim","match","watchpath","join","dirname","stat","watchFile","curr","prev","push","precomment","matched","contentforbuffer","runBufferCode","convertviewfile","rawoutputimage","callback","cmd","runCommand","initialOutputtext","Promise","reject","exec","error","stdout","stderr","outputtext","message","gnuplot","imagepath","Date","now","handleChooseGnuplot","files","set","getFromStore","key","get","Editor","newValue","this","props","className","style","width","onChange","handleLiveToggle","type","checked","live","id","htmlFor","mode","theme","bind","editorProps","$blockScrolling","setOptions","wrap","value","commands","bindKey","win","mac","handleSaveShortCut","React","Component","Viewer","imagetag","src","source","maxWidth","alt","Cli","height","Menubar","role","onClick","disabled","handleRunBtn","minWidth","accept","target","fn","App","testmagick","keyName","onKeyDown","Config","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0653e6e8.chunk.js","sourcesContent":["var electron,dialog,fs,childProcess,path, electronStore,isDev;\r\n\r\n\r\ntry {\r\n  electron = window.require(\"electron\");\r\n  isDev = window.require(\"electron-is-dev\");\r\n  dialog = electron.remote.dialog;\r\n  fs = window.require('fs');\r\n  childProcess = window.require('child_process');\r\n  path = window.require('path');\r\n  electronStore = window.require('electron-store');\r\n} catch(e) {\r\n\r\n}\r\n\r\nconst store = new electronStore();\r\n\r\nmodule.exports = {\r\n  handleOpenBtn: (this_) => {\r\n    dialog.showOpenDialog({\r\n      properties: ['openFile'], filters: [{ name: 'gnuplot file', extensions: ['plt'] }]\r\n    }).then(result => {\r\n      if (!result.canceled) {\r\n        var filepath = result.filePaths[0];\r\n        fs.readFile(filepath, 'utf-8', (err,data)=>{\r\n          if (err) console.log(err);\r\n          this_.setState({file: filepath});\r\n          module.exports.handleContentChange(data, this_);\r\n        });\r\n\r\n      }\r\n    }).catch(err => { console.log(err); });\r\n  },\r\n\r\n  handleCloseBtn: (this_) => {\r\n    this_.setState({filecontent:\"\", file: null, viewimage: '', clioutput: 'file closed'});\r\n  },\r\n\r\n  onSaveShortCut: (this_) => {\r\n    if (this_.state.file) module.exports.handleSaveBtn(this_);\r\n  },\r\n\r\n  handleSaveBtn: (this_) => {\r\n    fs.writeFile(this_.state.file, this_.state.filecontent, 'utf-8', (err) => {\r\n      if (err) console.log(err);\r\n    });\r\n  },\r\n\r\n\r\n  handleContentChange: (newcontent, this_) => {\r\n\r\n    this_.setState({filecontent: newcontent});\r\n\r\n    if (!this_.state.editorIsLive) return;\r\n\r\n    this_.state.watches.map((watcherfile)=>{\r\n      fs.unwatchFile(watcherfile);\r\n      return watcherfile;\r\n    });\r\n\r\n\r\n    var rawoutput = path.resolve('./gnuplotview.png');\r\n    var lines = newcontent.split('\\n');\r\n    var newwatches = [];\r\n    for (var i=lines.length-1; i>= 0; i--) {\r\n      //parse #@watch comments\r\n      if (this_.state.file && lines[i].search('#@watch')>-1) {\r\n        var newwatch = lines[i].trim();\r\n        var newwatchMatched = newwatch.match(/#@watch +['\"](.+)['\"]/);\r\n        if (newwatchMatched == null) continue;\r\n        newwatch = newwatchMatched[1];\r\n        let watchpath = path.join(path.dirname(this_.state.file), newwatch);\r\n        fs.stat(watchpath, (err)=> {\r\n          if (err) console.log(err);\r\n          else {\r\n            fs.watchFile(watchpath, (curr,prev) => {\r\n              module.exports.handleContentChange(this_.state.filecontent, this_);\r\n            });\r\n            newwatches.push(watchpath);\r\n          }\r\n        });\r\n      }\r\n\r\n      var precomment = lines[i].split('#')[0];\r\n      if (precomment.search(/(?<!un)(set) +(out)/) > -1) {\r\n        var matched = precomment.match(/(?<!un)(set) +(out[\\S]*) +['\"](.+)['\"]/);\r\n        if (matched) {\r\n          rawoutput = (path.resolve(path.dirname(this_.state.file), matched[3]) );\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n\r\n\r\n    this_.setState({watches: newwatches});\r\n    if (this_.state.file== null) lines[0] = \"set term png; set output 'gnuplotview.png';\"+lines[0];\r\n    var contentforbuffer = lines.join('\\n');\r\n\r\n\r\n    fs.writeFile('gnuplotbuffer.temp', contentforbuffer, 'utf-8', (err) => {\r\n      if (err) console.log(err);\r\n      module.exports.runBufferCode(this_, rawoutput);\r\n    });\r\n\r\n  },\r\n\r\n  convertviewfile: (rawoutputimage, this_,callback) => {\r\n    const magickexe = path.resolve('./', isDev ? '': 'resources', 'extraResources','image_magick/magick.exe');\r\n    var cmd = magickexe + ' convert '+ rawoutputimage+ ' '+ path.resolve('./')+'/gnuplotview.png';\r\n    module.exports.runCommand(cmd, this_).then(callback).catch((e) => {\r\n      console.log(e);\r\n    });\r\n  },\r\n\r\n\r\n  runCommand: (cmd, this_, initialOutputtext=\"\") => {\r\n    return new Promise(function (resolve, reject) {\r\n      childProcess.exec(cmd, (error, stdout, stderr) => {\r\n          var outputtext = initialOutputtext;\r\n          if (error) {\r\n              console.log(`error: ${error.message}`);\r\n              outputtext += '\\n' + stderr;\r\n              reject(error);\r\n          }\r\n          /*if (stderr) {\r\n              console.log(`stderr: ${stderr}`);\r\n              outputtext += '\\n' + stderr;\r\n          }*/\r\n          if (stdout) {\r\n            console.log(`stdout: ${stdout}`);\r\n            outputtext+= '\\n' + stdout;\r\n          }\r\n\r\n          this_.setState({clioutput: outputtext});\r\n          resolve(outputtext);\r\n      });\r\n    });\r\n\r\n  },\r\n\r\n  runBufferCode: (this_, rawoutput) => {\r\n    var cmd = '';\r\n    var workingdir;\r\n    if (this_.state.file) {\r\n      workingdir = path.dirname(this_.state.file);\r\n    } else {\r\n      workingdir = path.dirname('gnuplotbuffer.temp');\r\n    }\r\n\r\n    cmd = 'cd /d \"'+workingdir+'\" ';\r\n    cmd += '&& \"'+this_.state.gnuplot+'\" \"'+path.resolve('gnuplotbuffer.temp')+'\"';\r\n    module.exports.runCommand(cmd, this_).then(()=>{\r\n\r\n      module.exports.convertviewfile(rawoutput, this_, () => {\r\n        var imagepath = path.resolve('./gnuplotview.png');\r\n        imagepath = imagepath.split('\\\\').join('/');\r\n        this_.setState({viewimage: ''});\r\n        this_.setState({viewimage: imagepath+'?'+Date.now()});\r\n\r\n      });\r\n    }).catch((e) => {\r\n      this_.setState({viewimage: ''});\r\n    });\r\n\r\n  },\r\n\r\n  handleChooseGnuplot: (this_, files) => {\r\n    if (files[0]) {\r\n      store.set('gnuplot', files[0].path);\r\n      this_.setState({gnuplot: files[0].path});\r\n    }\r\n  },\r\n\r\n  getFromStore: (key) => {\r\n    return store.get(key);\r\n  }/*,\r\n\r\n  handleExportBtn: (this_) => {\r\n    var cmd = '';\r\n    var workingdir = path.dirname(this_.state.file);\r\n    cmd = 'cd /d \"'+workingdir+'\" ';\r\n    cmd += '&& \"'+this_.state.gnuplot+'\" \"'+this_.state.file+'\"';\r\n    module.exports.runCommand(cmd, this_);\r\n  }*/\r\n};\r\n","import React from 'react';\r\nimport './Editor.css';\r\n\r\nimport AceEditor from \"react-ace\";\r\n\r\nimport \"ace-builds/src-noconflict/mode-java\";\r\nimport \"ace-builds/src-noconflict/theme-github\";\r\n\r\n\r\nclass Editor extends React.Component {\r\n\r\n  onChange(newValue) {\r\n\r\n    this.props.handleContentChange(newValue);\r\n\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"cos-xs-6\">\r\n        <div className=\"card text-white bg-primary text-left\" style={{width: '600px'}}>\r\n          <div className=\"card-header\">editor\r\n\r\n          </div>\r\n          <div className=\"card-body p-2\">\r\n          <div className=\"form-check form-check-inline\">\r\n          <input onChange={(e)=>{this.props.handleLiveToggle(e)}} className=\"form-check-input\" type=\"checkbox\" checked={this.props.live} id=\"editorIsLive\" />\r\n          <label className=\"form-check-label\" htmlFor=\"editorIsLive\">\r\n            Enable live editing (disable when typing output file name)\r\n          </label></div>\r\n            <AceEditor\r\n              mode=\"java\"\r\n              theme=\"github\"\r\n              onChange={this.onChange.bind(this)}\r\n              name=\"ace-editor-component\"\r\n              editorProps={{ $blockScrolling: true }}\r\n              setOptions ={{wrap: true}}\r\n              value={this.props.filecontent}\r\n              width=\"570px\"\r\n              commands={[{\r\n                name: \"save\", bindKey: {win: \"Ctrl-s\", mac: \"Cmd-s\"}, exec: (e)=>{this.props.handleSaveShortCut()}\r\n              }]} />\r\n          </div>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\n\r\n\r\n\r\nclass Viewer extends React.Component {\r\n\r\n\r\n  render() {\r\n    let imagetag;\r\n    if (this.props.file == null && (this.props.filecontent||'').trim().length<1) {\r\n      imagetag = <samp>no code to plot</samp>;\r\n    } else {\r\n      imagetag = <img src={this.props.source} style={{maxWidth: '570px'}} alt=\"Gnuplot error or other problem showing plot.\" className=\"float-right\" />\r\n\r\n    }\r\n    return(\r\n      <div className=\"cos-xs-6 mr-auto\">\r\n        <div className=\"card bg-light text-left\" style={{width: '600px'}}>\r\n          <div className=\"card-header\">png view</div>\r\n          <div className=\"card-body\">{imagetag}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Viewer;\r\n","import React from 'react';\r\n\r\nimport './Cli.css';\r\n\r\nclass Cli extends React.Component {\r\n\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"cos-xs-6\">\r\n      <div className=\"card text-white bg-dark text-left\" style={{width: '600px', height: '300px'}}>\r\n        <div className=\"card-header\">cmd output</div>\r\n        <div className=\"card-body p-2 overflow-auto\">\r\n          <small><samp>{this.props.clioutput}</samp></small>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cli;\r\n","import React from 'react';\r\n\r\n\r\n\r\nclass Menubar extends React.Component {\r\n\r\n\r\n  render() {\r\n    return(\r\n      <div className=\"text-left\">\r\n        <div className=\"btn-group\" role=\"group\">\r\n          <button className=\"btn btn-primary\"\r\n            onClick={this.props.handleOpenBtn}\r\n            disabled={this.props.file != null}>Open</button>\r\n          <button className=\"btn btn-light\"\r\n            onClick={this.props.handleSaveBtn}\r\n            disabled={this.props.file==null}>Save</button>\r\n          <button className=\"btn btn-dark\"\r\n            onClick={this.props.handleCloseBtn}\r\n            disabled={this.props.file==null}>Close</button>\r\n          <button className=\"btn btn-info\"\r\n            onClick={this.props.handleRunBtn}>Run</button>\r\n          {/*<button className=\"btn btn-outline-success\" disabled={this.props.file==null}\r\n            onClick={this.props.handleExportBtn}>Export</button>*/}\r\n        </div>\r\n        <samp className=\"d-inline-flex ml-2\">current file: {this.props.file}</samp>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menubar;\r\n","import React from 'react';\r\n\r\nclass Editor extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"cos-xs-6\">\r\n      <div className=\"card text-white bg-secondary text-left\" style={{minWidth: '600px', height: '300px'}}>\r\n        <div className=\"card-header\">config</div>\r\n        <div className=\"card-body overflow-auto p-2\">\r\n        <div className=\"form-group row\">\r\n          <label className=\"form-control-label col-sm-4\"  htmlFor=\"gnuplot-exec-input\">gnuplot executable</label>\r\n          <div className=\"col-sm-10\">\r\n            <input id=\"gnuplot-exec-input\" type=\"text\" className=\"form-control\" value={this.props.gnuplot} disabled />\r\n            <input type=\"file\" accept=\".exe\" onChange={(e) => {this.props.handleChooseGnuplot(e.target.files)}} />\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Editor from './Editor.js';\r\nimport Viewer from './Viewer.js';\r\nimport Cli from './Cli.js';\r\nimport Menubar from './Menubar.js';\r\nimport Config from './Config.js';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport HotKeys from 'react-hot-keys';\r\n\r\nvar fn = require('./AppFunctions.js');\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      file: null,\r\n      filecontent: null,\r\n      gnuplot: fn.getFromStore('gnuplot'),\r\n      clioutput: '',\r\n      viewimage: '',\r\n      watches: [],\r\n      editorIsLive: true\r\n    };\r\n  }\r\n\r\n  testmagick() {\r\n    console.log(\"testmagick\");\r\n    fn.testmagick(this)\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/\">\r\n            <HotKeys keyName={'ctrl+s'} onKeyDown={()=>{fn.onSaveShortCut(this)}}>\r\n            <div className=\"App\">\r\n\r\n              <Menubar\r\n                handleOpenBtn={() => {fn.handleOpenBtn(this)}}\r\n                handleSaveBtn={() => {fn.handleSaveBtn(this)}}\r\n                handleCloseBtn={() => {fn.handleCloseBtn(this)}}\r\n                handleRunBtn={() => {fn.runBufferCode(this)}}\r\n                file={this.state.file} />\r\n              <div className=\"container mw-100\"><div className=\"row flex-nowrap\">\r\n                <Editor filecontent={this.state.filecontent}\r\n                  handleContentChange={(newcontent) => {fn.handleContentChange(newcontent, this)}}\r\n                  handleSaveShortCut={() => {fn.onSaveShortCut(this)}}\r\n                  live={this.state.editorIsLive}\r\n                  handleLiveToggle={(e) => {this.setState({editorIsLive: e.target.checked}) }} />\r\n                <Viewer source={this.state.viewimage} file={this.state.file}\r\n                  filecontent={this.state.filecontent} />\r\n              </div><div className=\"row flex-nowrap\">\r\n                <Cli clioutput={this.state.clioutput} />\r\n                <Config gnuplot={this.state.gnuplot}\r\n                  handleChooseGnuplot={(files)=>{fn.handleChooseGnuplot(this, files)}} />\r\n              </div></div>\r\n            </div>\r\n            </HotKeys>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}